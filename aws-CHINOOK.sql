/**
PUTTING MY SQL CODE HERE. 
**/

-- SELECT EXERCISES
-- 2.1
--A: SELECTS ALL FROM EMPLOYEE
SELECT * FROM CHINOOK.EMPLOYEE;
--B: SELECTS ALL FROM EMPLOYEE UNDER THE CONDITION THAT LASTNAME = 'King'
SELECT * FROM CHINOOK.EMPLOYEE
WHERE LASTNAME = 'King';
--C: SELECTS ALL FROM EMPLOYEE UNDER THE CONDITIONS THAT FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL
SELECT * FROM CHINOOK.EMPLOYEE
WHERE FIRSTNAME = 'Andrew'
    AND REPORTSTO IS NULL;
--D: SELECTS ALL FROM ALBUM AND SORTS BY TITLE IN DESCENDING ORDER
SELECT * FROM CHINOOK.ALBUM
ORDER BY TITLE DESC;
--E: SELECTS FIRSTNAME FROM CUSTOMER AND ORDERS BY CITY IN ASCENDING ORDER
SELECT FIRSTNAME FROM CHINOOK.CUSTOMER
ORDER BY CITY ASC;
--F: SELECTS ALL FROM INVOICE UNDER THE CONDITIONS BILLINGADDRESS STARTS WITH T
SELECT * FROM CHINOOK.INVOICE
WHERE BILLINGADDRESS LIKE 'T%';

--INSERT INTO
--2.2
--A: INSERTS INTO GENRE SYNTHWAVE AND NORWEGIAN BLACK METAL WITH IDS 26 AND 27 RESPECTIVELY.
INSERT INTO CHINOOK.GENRE
VALUES (26, 'SYNTHWAVE');
INSERT INTO CHINOOK.GENRE(GENREID, NAME)
VALUES (27, 'NORWEGIAN BLACK METAL');
--B: INSERTS COMPLETE NONSENSE EMPLOYEES INTO EMPLOYEE TABLE
INSERT INTO CHINOOK.EMPLOYEE(EmployeeId, LastName, FirstName, Title, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email) 
VALUES (9, 'Dude', 'The Postal', 'Risk Assessor', TO_DATE('1969-2-20 00:00:00','yyyy-mm-dd hh24:mi:ss'), TO_DATE('1997-8-1 00:00:00','yyyy-mm-dd hh24:mi:ss'), '1990 Paradise Ave NW', 'Edmonton', 'AB', 'Canada', 'T5K 3N9', '+1 (780) 428-9286', '+1 (780) 429-5442', 'pdude@chinookcorp.com');
INSERT INTO CHINOOK.EMPLOYEE(EmployeeId, LastName, FirstName, Title, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email) 
VALUES (10, 'Mann', 'Horace', 'Historical Figure', TO_DATE('1796-5-04 00:00:00','yyyy-mm-dd hh24:mi:ss'), TO_DATE('1848-4-3 00:00:00','yyyy-mm-dd hh24:mi:ss'), '1 Not Canada W', 'Edmonton', 'AB', 'Canada', 'T5K 3N4', null, null, 'hmann@chinookcorp.com');
--C: INSERTS OBVIOUSLY FAKE CUSTOMERS INTO CUSTOMER TABLE
INSERT INTO CHINOOK.CUSTOMER (CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId) VALUES (60, 'Smith', 'Smith', 'Faux Corporation', '2 DNE Blvd', 'Seattle', 'WA', 'USA', '98052-8300', '+1 (425) 444-9999', null, 'smith@faux.com', null);
INSERT INTO CHINOOK.CUSTOMER (CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId) VALUES (61, 'Davidson', 'Dave', 'Faux Corporation', '2 DNE Blvd', 'Seattle', 'WA', 'USA', '98052-8300', '+1 (425) 729-3242', null, 'dave@faux.com', 4);

--UPDATE
--2.3
--A: UPDATES THE NAMES IN CUSTOMER WHERE NAME IS AARON MITCHELL TO ROBERT WALTER
UPDATE CHINOOK.CUSTOMER
SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE FIRSTNAME = 'Aaron' 
    AND LASTNAME = 'Mitchell';
--B: UPDATES THE NAME OF CREEDENCE CLEARWATER REVIVAL IN ARTIST TO BE CCR
UPDATE CHINOOK.ARTIST
SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';

--3: JOINS
--3.1: INNER
--A: SELECTS CUSTOMER NAMES AND INVOICE ID FROM INNER JOINED CUSTOMER AND INVOICES WHERE THE CUSTOMERIDS ARE THE SAME
SELECT CHINOOK.CUSTOMER.FIRSTNAME, CHINOOK.CUSTOMER.LASTNAME, CHINOOK.INVOICE.INVOICEID
FROM CHINOOK.CUSTOMER
INNER JOIN CHINOOK.INVOICE
ON CHINOOK.CUSTOMER.CUSTOMERID = CHINOOK.INVOICE.CUSTOMERID;
--3.2: OUTER
--A: SELECTS CUSTOMERID, FIRSTNAME, LASTNAME, INVOICEID, AND TOTAL FROM LEFT JOINED CUSTOMER AND INVOICE TABLE ON CUSTOMERID
SELECT CHINOOK.CUSTOMER.CUSTOMERID, CHINOOK.CUSTOMER.FIRSTNAME, CHINOOK.CUSTOMER.LASTNAME, CHINOOK.INVOICE.INVOICEID, CHINOOK.INVOICE.TOTAL
FROM CHINOOK.CUSTOMER
LEFT OUTER JOIN CHINOOK.INVOICE
ON CHINOOK.CUSTOMER.CUSTOMERID = CHINOOK.INVOICE.CUSTOMERID;
--3.3: RIGHT
--A: SELECTS ARTIST NAME AND ALBUMTITLE FROM RIGHTJOINED ALBUM AND ARTIST WHERE ARTISTIDS ARE THE SAME
SELECT CHINOOK.ARTIST.NAME, CHINOOK.ALBUM.TITLE
FROM CHINOOK.ALBUM
RIGHT JOIN CHINOOK.ARTIST
ON CHINOOK.ALBUM.ARTISTID = CHINOOK.ARTIST.ARTISTID;
--3.4: CROSS
--A: SELECTS ARTIST NAME AND ALBUMTITLE FROM CROSSJOINED ARTIST AND ALBUM TABLES AND ORDERS THE RESULTS BY ASCENDING ARTISTNAME
SELECT CHINOOK.ARTIST.NAME, CHINOOK.ALBUM.TITLE
FROM CHINOOK.ARTIST CROSS JOIN CHINOOK.ALBUM
ORDER BY CHINOOK.ARTIST.NAME ASC;
--3.5: SELF
--A: SELECTS ALL EMPLOYEE MATCH DATA FOR SAME REPORTSTO VALUE
SELECT A.*, B.*
FROM CHINOOK.EMPLOYEE A
INNER JOIN CHINOOK.EMPLOYEE B ON B.REPORTSTO = A.REPORTSTO;
--3.6 JOINED QUERIES
--A: SELECTS FULL NAME AND TOTAL EXPENDITURES BASED ON CUSTOMER INNER JOINED WITH INVOICE ON CUSTOMERID
SELECT CU.FIRSTNAME || ' ' || CU.LASTNAME FULL_NAME, SUM(CHINOOK.INVOICE.TOTAL) TOTAL
FROM CHINOOK.CUSTOMER CU
INNER JOIN CHINOOK.INVOICE
ON CU.CUSTOMERID = CHINOOK.INVOICE.CUSTOMERID
GROUP BY CU.LASTNAME, CU.FIRSTNAME;

--B: IN A PAINFULLY ROUNDABOUT WAY, A 3-WAY-JOIN IS MADE TO LINK EMPLOYEE AND TOTALS, THEN THE TOTALS ARE SUMMED, THEN THE TOP ROW IS TAKEN SINCE MAX SEEMS TO NOT WORK THE WAY ONE WOULD EXPECT
SELECT EMPLOYEEID, TOTAL
FROM ( 
SELECT SUM(CHINOOK.INVOICE.TOTAL) TOTAL, CHINOOK.EMPLOYEE.EMPLOYEEID
FROM CHINOOK.CUSTOMER
INNER JOIN CHINOOK.INVOICE
ON CHINOOK.CUSTOMER.CUSTOMERID = CHINOOK.INVOICE.CUSTOMERID
INNER JOIN CHINOOK.EMPLOYEE 
ON CHINOOK.CUSTOMER.SUPPORTREPID = CHINOOK.EMPLOYEE.EMPLOYEEID
GROUP BY CHINOOK.EMPLOYEE.EMPLOYEEID
ORDER BY TOTAL DESC
) TOTALS
WHERE ROWNUM = 1;
--C:PRODUCES A SET OF GENRES ORDERED BY PURCHASE COUNT, DESCENDINGLY
SELECT SUM(CHINOOK.INVOICELINE.QUANTITY) PURCHASES, CHINOOK.GENRE.GENREID, CHINOOK.GENRE.NAME
FROM CHINOOK.INVOICELINE 
INNER JOIN CHINOOK.TRACK
ON CHINOOK.TRACK.TRACKID = CHINOOK.INVOICELINE.TRACKID
INNER JOIN CHINOOK.GENRE
ON CHINOOK.TRACK.GENREID = CHINOOK.GENRE.GENREID
GROUP BY CHINOOK.GENRE.GENREID, CHINOOK.GENRE.NAME
ORDER BY PURCHASES DESC;

--4: SQL FUNCTIONS
--4.1 SYSTEM DEFINED
--A: SELECTS CURRENT_TIME FROM THE DUMMY TABLE
CREATE OR REPLACE FUNCTION CRTIME
    RETURN VARCHAR
    IS
        RET_TIME VARCHAR(11);
    BEGIN
        SELECT TO_CHAR(CURRENT_DATE, 'HH:MM:SS AM')
        INTO RET_TIME 
        FROM DUAL;
        RETURN RET_TIME;
    END CRTIME;
        
SELECT CRTIME FROM DUAL;
--B: SELECTS DATA_LENGTH FROM THE TABLE OF ALL COLUMNS WHERE IT'S IN MEDIATYPE AND HAS NAME NAME
CREATE OR REPLACE FUNCTION MEDIATYPE_NAME_LENGTH
    RETURN NUMBER
    IS
        RET NUMBER;
    BEGIN
        SELECT DATA_LENGTH 
        INTO RET
        FROM DBA_TAB_COLUMNS
        WHERE TABLE_NAME = 'MEDIATYPE'
            AND COLUMN_NAME = 'NAME';
        RETURN RET;
    END;
SELECT MEDIATYPE_NAME_LENGTH FROM DUAL;
--4.2
--A: SELECTS THE AVERAGE OF INVOICE TOTALS
CREATE OR REPLACE FUNCTION INVOICE_TOT
    RETURN NUMBER
    IS
        RET NUMBER;
    BEGIN
        SELECT AVG(CHINOOK.INVOICE.TOTAL)
        INTO RET
        FROM CHINOOK.INVOICE;
        RETURN RET;
    END;
SELECT INVOICE_TOT FROM DUAL;
--B: SELECTS THE MAX FROM TRACKS.UNITPRICE
CREATE OR REPLACE FUNCTION EXPENSIVE_TRACK
    RETURN NUMBER
    IS 
        RET NUMBER;
    BEGIN
        SELECT MAX(CHINOOK.TRACK.UNITPRICE)
        INTO RET
        FROM CHINOOK.TRACK;
        RETURN RET;
    END;
    
SELECT EXPENSIVE_TRACK FROM DUAL;
--4.3
--A: PRODUCES AVERAGE OF ALL INVOICELINE UNITPRICES
CREATE OR REPLACE FUNCTION INVOICELINEAVG
    RETURN NUMBER 
    IS
        AVGRET NUMBER;
    BEGIN
        SELECT AVG(CHINOOK.INVOICELINE.UNITPRICE)
        INTO AVGRET
        FROM CHINOOK.INVOICELINE;
        RETURN AVGRET;
    END INVOICELINEAVG;

SELECT INVOICELINEAVG() FROM DUAL;
--4.4
--A: RETURNS A SYS_REFCURSOR POINTING AT THE SET OF EMPLOYEES WITH BIRTHDATE ABOVE 1968
CREATE OR REPLACE FUNCTION YOUNG_EMPLOYEES
    RETURN SYS_REFCURSOR
    IS
        CURS_YE SYS_REFCURSOR;
    BEGIN
        OPEN CURS_YE FOR
            SELECT *
            FROM CHINOOK.EMPLOYEE
            WHERE CHINOOK.EMPLOYEE.BIRTHDATE >= TO_DATE('01-JAN-1969', 'DD-MM-YYYY');
        RETURN CURS_YE;
    END;
SELECT * FROM 
(SELECT YOUNG_EMPLOYEES FROM DUAL) YE;

--5 STORED PROCEDURES
--5.1 BASIC STORED PROCEDURE
--A:
CREATE OR REPLACE PROCEDURE GET_EMPLOYEE_NAMES(SV OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN SV FOR
    SELECT CHINOOK.EMPLOYEE.FIRSTNAME, CHINOOK.EMPLOYEE.LASTNAME
    FROM CHINOOK.EMPLOYEE;
END;

DECLARE
    SV SYS_REFCURSOR;
    EF CHINOOK.EMPLOYEE.FIRSTNAME%TYPE;
    EL CHINOOK.EMPLOYEE.LASTNAME%TYPE;
BEGIN
    GET_EMPLOYEE_NAMES(SV);
    LOOP
        FETCH SV INTO EF,EL;
        EXIT WHEN SV%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(EF || ' ' || EL); --does not work. 
    END LOOP;
    CLOSE SV;
END;

--5.2 Stored procedure input parameters
--A: UPDATES AN EMPLOYEE'S PERSONAL DATA
CREATE OR REPLACE PROCEDURE UPD_EMPLOYEE_RECORD(EID IN CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE,
    EADDR IN CHINOOK.EMPLOYEE.ADDRESS%TYPE,
    ECITY IN CHINOOK.EMPLOYEE.CITY%TYPE,
    EST IN CHINOOK.EMPLOYEE.STATE%TYPE,
    EPOST IN CHINOOK.EMPLOYEE.POSTALCODE%TYPE,
    EPHONE IN CHINOOK.EMPLOYEE.PHONE%TYPE,
    EFAX IN CHINOOK.EMPLOYEE.FAX%TYPE,
    EEMAIL IN CHINOOK.EMPLOYEE.EMAIL%TYPE)
IS
BEGIN
    UPDATE CHINOOK.EMPLOYEE
    SET ADDRESS = EADDR,
        CITY = ECITY,
        STATE = EST,
        POSTALCODE = EPOST,
        PHONE = EPHONE,
        FAX = EFAX,
        EMAIL = EEMAIL
    WHERE EID = EMPLOYEEID;
END;
--B: FINDS MANAGER DATA FOR EMPLOYEE AND PUTS IT IN THE OUTPUT VARIABLE
CREATE OR REPLACE PROCEDURE GET_MGR(EID IN CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE, MID OUT CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE)
IS
BEGIN
    SELECT CHINOOK.EMPLOYEE.REPORTSTO
    INTO MID
    FROM CHINOOK.EMPLOYEE
    WHERE CHINOOK.EMPLOYEE.EMPLOYEEID = EID;
END;
--5.3 STORED PROCEDURE OUTPUT PARAMETERS
--A:PUTS FIRST LAST AND COMPANY INTO OUTPUT VALUES GIVEN CUSTOMER ID
CREATE OR REPLACE PROCEDURE GET_CUSTOMER_DATA(CID IN CHINOOK.CUSTOMER.CUSTOMERID%TYPE,
    CFIRST OUT CHINOOK.CUSTOMER.FIRSTNAME%TYPE,
    CLAST OUT CHINOOK.CUSTOMER.LASTNAME%TYPE,
    CCOMP OUT CHINOOK.CUSTOMER.COMPANY%TYPE)
IS
BEGIN
    SELECT CHINOOK.CUSTOMER.FIRSTNAME, CHINOOK.CUSTOMER.LASTNAME, CHINOOK.CUSTOMER.COMPANY
    INTO CFIRST, CLAST, CCOMP
    FROM CHINOOK.CUSTOMER
    WHERE CHINOOK.CUSTOMER.CUSTOMERID = CID;
END;

--6.0 TRANSACTIONS
--A: DELETES INVOICE AT INVOICEID AND ALL RELATED INVOICELINES AS TRANSACTION.
CREATE OR REPLACE PROCEDURE DELINVOICE(IID IN CHINOOK.INVOICE.INVOICEID%TYPE)
IS
BEGIN
    DELETE FROM CHINOOK.INVOICELINE
    WHERE CHINOOK.INVOICELINE.INVOICEID = IID;
    DELETE FROM CHINOOK.INVOICE
    WHERE CHINOOK.INVOICE.INVOICEID = IID;
    COMMIT;
END;
--B: INSERTS ENTIRE CUSTOMER AS TRANSACTION
CREATE OR REPLACE PROCEDURE INSCUSTOMER(CID IN CHINOOK.CUSTOMER.CUSTOMERID%TYPE,
    CFIRST IN CHINOOK.CUSTOMER.FIRSTNAME%TYPE,
    CLAST IN CHINOOK.CUSTOMER.LASTNAME%TYPE,
    CCOMPANY IN CHINOOK.CUSTOMER.COMPANY%TYPE,
    CADDR IN CHINOOK.CUSTOMER.ADDRESS%TYPE,
    CCITY IN CHINOOK.CUSTOMER.CITY%TYPE,
    CST IN CHINOOK.CUSTOMER.STATE%TYPE,
    CCOUNTRY IN CHINOOK.CUSTOMER.COUNTRY%TYPE,
    CPOSTAL IN CHINOOK.CUSTOMER.POSTALCODE%TYPE,
    CPHONE IN CHINOOK.CUSTOMER.PHONE%TYPE,
    CFAX IN CHINOOK.CUSTOMER.FAX%TYPE,
    CEMAIL IN CHINOOK.CUSTOMER.EMAIL%TYPE,
    CSUPP IN CHINOOK.CUSTOMER.SUPPORTREPID%TYPE)
IS
BEGIN
    INSERT INTO CUSTOMER
    VALUES(CID, CFIRST, CLAST, CCOMPANY, CADDR, CCITY, CST, CCOUNTRY, CPOSTAL, CPHONE, CFAX, CEMAIL, CSUPP);
    COMMIT;
END;

--7: TRIGGERS
--7.1
--A: AN INSERT TRIGGER THAT PRINTS SOME STUFF
CREATE OR REPLACE TRIGGER CHINOOK.INSTRIG
AFTER INSERT ON EMPLOYEE
BEGIN 
    DBMS_OUTPUT.PUT_LINE('INSERT HAPPENS, TRIGGERS ALL THE TIME');
END;

--B: AN UPDATE TRIGGER THAT PRINTS SOME STUFF
CREATE OR REPLACE TRIGGER CHINOOK.UPDTRIG
AFTER UPDATE ON ALBUM
BEGIN 
    DBMS_OUTPUT.PUT_LINE('UPDATE HAPPENS, TRIGGERS ALL THE TIME');
END;

--C: A DELETE TRIGGER THAT PRINTS SOME STUFF
CREATE OR REPLACE TRIGGER CHINOOK.DELTRIG
AFTER DELETE ON CUSTOMER
BEGIN 
    DBMS_OUTPUT.PUT_LINE('DELETE HAPPENS, TRIGGERS ALL THE TIME');
END;