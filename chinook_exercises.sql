-------------------------------------------------------------------------------------------------------------------------------
-- Chinook Exercises - 2.0
-------------------------------------------------------------------------------------------------------------------------------
-- 2.1 SELECT
-- A. ALL EMPLOYEES
SELECT *
FROM CHINOOK.EMPLOYEE;
-- B. ALL EMPLOYEES WITH LAST NAME KING
SELECT *
FROM CHINOOK.EMPLOYEE
WHERE CHINOOK.EMPLOYEE.LASTNAME = 'King';
-- C. ALL EMPLOYEES NAMED ANDREW THAT REPORT TO NULL
SELECT *
FROM CHINOOK.EMPLOYEE
WHERE CHINOOK.EMPLOYEE.FIRSTNAME = 'Andrew'
AND CHINOOK.EMPLOYEE.REPORTSTO IS NULL;
-- D. ALL ALBUMS SORTED IN DESCENDING ORDER BY TITLE
SELECT *
FROM CHINOOK.ALBUM
ORDER BY CHINOOK.ALBUM.TITLE DESC;
-- E. GET FIRST NAME OF CUSTOMER AND ORDER BY CITY
SELECT CHINOOK.CUSTOMER.FIRSTNAME
FROM CHINOOK.CUSTOMER
ORDER BY CHINOOK.CUSTOMER.CITY ASC;
-- F. ALL INVOICES WITH A BILLING ADDRESS LIKE "T%"
SELECT *
FROM CHINOOK.INVOICE
WHERE CHINOOK.INVOICE.BILLINGADDRESS LIKE 'T%';

-- 2.2 INSERT INTO
-- A. TWO NEW RECORDS INTO GENRE TABLE
INSERT INTO CHINOOK.GENRE VALUES(26, 'Atmospheric Black Metal');
INSERT INTO CHINOOK.GENRE VALUES(27, 'Ska Punk');
-- B. TWO NEW RECORDS INTO EMPLOYEE TABLE
INSERT INTO CHINOOK.EMPLOYEE VALUES(9, 'Bulkhead', 'Slab', 'Squirrel Puncher', NULL, '14-APR-85', '24-FEB-19', '400 Bridge ST', 'MuscleTown', 'AB', 'CANADA', 'T5K 3M5', '+1(780) 867-5309', '+1 (780) 428-3457', 'slab@chinookcorp.com');
INSERT INTO CHINOOK.EMPLOYEE VALUES(10, 'Deadlift', 'Butch', 'Box Lifter', NULL, '27-AUG-87', '26-FEB-19', '325 Rock RD', 'MuscleTown', 'AB', 'CANADA', 'T5K 3M5', '+1(780) 485-9762', '+1 (780) 428-3457', 'butch@chinookcorp.com');
-- C. TWO NEW RECORDS INTO CUSTOMER
INSERT INTO CHINOOK.CUSTOMER VALUES(60, 'Steve', 'Stevens', 'Games Workshop', '24 Grink ST', 'Scrimbal', 'AB', 'CANADA', 'T5K 35Q', '+1(780) 682-4509', '+1 (780) 697-3049', 'stevesteve@gmail.com', 10);
INSERT INTO CHINOOK.CUSTOMER VALUES(61, 'Daniel', 'Danielson', 'Grogers', '45 Binmk ST', 'Scrimbal', 'AB', 'CANADA', 'T5K 35Q', '+1(780) 506-4837', '+1 (780) 606-3323', 'dandan@gmail.com', 10);

-- 2.3 UPDATE
-- A. UPDATE AARON MITCHELL TO ROBERT WALTER
UPDATE CHINOOK.CUSTOMER
SET CHINOOK.CUSTOMER.FIRSTNAME='Robert', CHINOOK.CUSTOMER.LASTNAME='Walter'
WHERE CHINOOK.CUSTOMER.FIRSTNAME = 'Aaron' AND CHINOOK.CUSTOMER.LASTNAME = 'Mitchell';
-- B. UPDATE CREEDENCE TO CCR
UPDATE CHINOOK.ARTIST
SET CHINOOK.ARTIST.NAME='CCR'
WHERE CHINOOK.ARTIST.NAME = 'Creedence Clearwater Revival';

-------------------------------------------------------------------------------------------------------------------------------
-- Chinook Exercises - 3.0
-------------------------------------------------------------------------------------------------------------------------------
-- 3.1 INNER
-- A. INNER JOIN JOINS CUSTOMERS AND ORDERS AND SPECIFIES NAME OF CUSTOMER AND INVOICEID
SELECT CHINOOK.CUSTOMER.FIRSTNAME, CHINOOK.INVOICE.INVOICEID
FROM CHINOOK.CUSTOMER
JOIN CHINOOK.INVOICE
ON CHINOOK.CUSTOMER.CUSTOMERID = CHINOOK.INVOICE.CUSTOMERID;
-- 3.2 OUTER
-- A. OUTER JOIN JOINS CUSTOMER AND INVOICE TABLE, SPECIFYING CUSTOMERID, FIRSTNAME, LASTNAME, INVOICEID, AND TOTAL
SELECT CHINOOK.CUSTOMER.CUSTOMERID, CHINOOK.CUSTOMER.FIRSTNAME, CHINOOK.CUSTOMER.LASTNAME, CHINOOK.INVOICE.INVOICEID, CHINOOK.INVOICE.TOTAL
FROM CHINOOK.CUSTOMER
FULL OUTER JOIN CHINOOK.INVOICE
ON CHINOOK.INVOICE.CUSTOMERID = CHINOOK.CUSTOMER.CUSTOMERID;
-- 3.3 RIGHT
-- A. RIGHT JOIN JOINS ALBUM AND ARTIST SPECIFYING NAME AND TITLE
SELECT CHINOOK.ARTIST.NAME, CHINOOK.ALBUM.TITLE
FROM CHINOOK.ALBUM
RIGHT JOIN CHINOOK.ARTIST
ON CHINOOK.ALBUM.ARTISTID = CHINOOK.ARTIST.ARTISTID;
-- 3.4 CROSS
-- A. CROSS JOIN JOINS ALBUM AND ARTIST AND SORTS BY ARTIST NAME IN ASC
SELECT *
FROM CHINOOK.ALBUM
CROSS JOIN CHINOOK.ARTIST
ORDER BY CHINOOK.ARTIST.NAME ASC;
-- 3.5 SELF
-- A. SELF JOIN ON EMPLOYEE TABLE JOINING ON REPORTSTO COLUMN
SELECT A.FIRSTNAME AS EMPLOYEE, B.FIRSTNAME AS MANAGER
FROM CHINOOK.EMPLOYEE A, CHINOOK.EMPLOYEE B
WHERE A.REPORTSTO = B.EMPLOYEEID;
-- 3.6 JOINED QUERIES
-- A. QUERY THAT SHOWS THE CUSTOMER FIRST NAME AND LAST NAME AS FULL NAME AND PUTS OUT THEIR TOTAL
SELECT SUM(I.TOTAL) TOTAL, C.FIRSTNAME||' '||C.LASTNAME, C.CUSTOMERID
FROM CHINOOK.INVOICE I
JOIN CHINOOK.CUSTOMER C
ON I.CUSTOMERID = C.CUSTOMERID
GROUP BY C.CUSTOMERID, C.FIRSTNAME||' '||C.LASTNAME
ORDER BY TOTAL DESC;
-- B. QUERY FOR EMPLOYEE WITH HIGHEST TOTAL SALES
SELECT SUM (I.TOTAL) TOTAL, E.EMPLOYEEID
FROM CHINOOK.CUSTOMER C
JOIN CHINOOK.INVOICE I
ON C.CUSTOMERID = I.CUSTOMERID
JOIN CHINOOK.EMPLOYEE E
ON E.EMPLOYEEID = C.SUPPORTREPID
GROUP BY E.EMPLOYEEID
ORDER BY TOTAL DESC;
-- C. QUERY WHICH SHOWS NUMBER OF PURCHASES FOR GENRE
SELECT G.NAME, SUM (I.QUANTITY) QUANTITY
FROM CHINOOK.INVOICELINE I
JOIN CHINOOK.TRACK T
ON T.TRACKID = I.TRACKID
JOIN CHINOOK.GENRE G
ON G.GENREID = T.GENREID
GROUP BY G.NAME
ORDER BY QUANTITY DESC;

-------------------------------------------------------------------------------------------------------------------------------
-- Chinook Exercises - 4.0
-------------------------------------------------------------------------------------------------------------------------------
-- 4.1 SYSTEM DEFINED FUNCTIONS
-- WE HAVE TO MAKE OUR OWN FUNCTIONS FOR THESE
-- A. FUNCTION THAT RETURNS THE CURRENT TIME
CREATE OR REPLACE FUNCTION GET_TIME
RETURN VARCHAR2
IS
BEGIN
    RETURN TO_CHAR(CURRENT_DATE, 'HH24:MI:SS');
END;
SELECT GET_TIME AS THE_TIME_IS
FROM DUAL;
-- B. FUNCTION THAT RETURNS LENGTH OF NAME IN MEDIATYPE
CREATE OR REPLACE FUNCTION STR_LENGTH(NAME IN VARCHAR2)
RETURN NUMBER
IS
BEGIN
    RETURN LENGTH(NAME);
END;
SELECT STR_LENGTH(M.NAME) AS LENGTH_OF_NAME
FROM CHINOOK.MEDIATYPE M;

-- 4.2 SYSTEM DEFINED AGGREGATE FUNCTIONS
-- WE HAVE TO MAKE OUT OWN FUNCTIONS FOR THESE
-- A. FUNCTION THAT RETURNS THE AVERAGE TOTAL OF ALL INVOICES
CREATE OR REPLACE FUNCTION AVG_INVOICES
RETURN NUMBER
IS
TOTAL NUMBER;
BEGIN
    SELECT AVG(CHINOOK.INVOICE.TOTAL)
    INTO TOTAL
    FROM CHINOOK.INVOICE;
    RETURN TOTAL;
END;
SELECT AVG_INVOICES AS AVERAGE_OF_THE_INVOICES
FROM DUAL;
-- B. FUNCTION THAT RETURNS THE MOST EXPENSIVE TRACK
CREATE OR REPLACE FUNCTION MOST_EXPENSIVE
RETURN NUMBER
IS
MOST NUMBER;
BEGIN
    SELECT MAX(I.UNITPRICE) INTO MOST
    FROM CHINOOK.INVOICELINE I;
    RETURN MOST;
END;
SELECT MOST_EXPENSIVE AS THE_MOST_EXPENSIVE
FROM DUAL;

-- 4.3 USER DEFINED SCALAR FUNCTIONS
-- A. FUNCTION THAT RETURNS AVERAGE PRICE OF INVOICELINE ITEMS
CREATE OR REPLACE FUNCTION AVGPRICE
RETURN NUMBER
IS
    AVGPR NUMBER;
BEGIN
    SELECT AVG(X.UNITPRICE) INTO AVGPR
    FROM CHINOOK.INVOICELINE X;
    RETURN AVGPR;
END;
SELECT AVGPRICE
FROM DUAL;

-- 4.4 USER DEFINED TABLE VALUE FUNCTIONS
-- A. FUNCTION THAT RETURNS A CURSOR WITH ALL EMPLOYEES WHO ARE BORN AFTER 1968
CREATE OR REPLACE FUNCTION BORN_AFTER
RETURN SYS_REFCURSOR
IS
    CURSE SYS_REFCURSOR;
BEGIN
    OPEN CURSE FOR
    SELECT E.FIRSTNAME, E.BIRTHDATE
    FROM CHINOOK.EMPLOYEE E
    WHERE E.BIRTHDATE > TO_DATE('31-DEC-1968', 'DD-MM-YYYY');
    RETURN CURSE;
END;
SELECT BORN_AFTER
FROM DUAL;

-------------------------------------------------------------------------------------------------------------------------------
-- Chinook Exercises - 5.0
-------------------------------------------------------------------------------------------------------------------------------
-- 5.1 BASIC STORED PROCEDURES
-- A. STORED PROCEDURE THAT SELECTS THE FIRST AND LAST NAMES OF ALL THE EMPLOYEES
CREATE OR REPLACE PROCEDURE GET_FULLNAME_EMP(S OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN S FOR
    SELECT E.FIRSTNAME||' '||E.LASTNAME FROM CHINOOK.EMPLOYEE E ORDER BY E.LASTNAME DESC;
END;
DECLARE
    CURSE SYS_REFCURSOR;
    V VARCHAR2(200);
BEGIN
    GET_FULLNAME_EMP(CURSE);
    LOOP
        FETCH CURSE INTO V;
        EXIT WHEN CURSE%FOUND;
    END LOOP;
END;
EXEC GET_FULLNAME_EMP(CURSE);
-- 5.2 STORED PROCEDURE INPUT PARAMETERS
-- A. UPDATES PERSONAL INFO OF EMPLOYEE
CREATE OR REPLACE PROCEDURE UPDATE_INFO(S OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN S FOR
    UPDATE CHINOOK.EMPLOYEE SET FAXNUMBER = '(708)867-5309' WHERE EMPLOYEEID = 3;
END;
EXEC UPDATE_INFO(CURSE);
-- B. GETS MANAGER OF EMPLOYEE
CREATE OR REPLACE PROCEDURE GET_MANAGER(S OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN S FOR
    SELECT E.FIRSTNAME FROM CHINOOK.EMPLOYEE E WHERE E.EMPLOYEEID = (SELECT CHINOOK.EMPLOYEE.REPORTSTO FROM CHINOOK.EMPLOYEE);
END;
-- 5.3 STORED PROCEDURE OUTPUT PARAMETERS
-- A. STORED PROCEDURE RETURNS NAME AND COMPANY OF CUSTOMER
CREATE OR REPLACE PROCEDURE GET_MANAGER(S OUT SYS_REFCURSOR)
RETURN VARCHAR2
IS
    HOLD VARCHAR2;
BEGIN
    OPEN S FOR
    SELECT C.FIRSTNAME||' '||C.LASTNAME||' '||C.COMPANY INTO HOLD
    FROM CHINOOK.CUSTOMER C WHERE C.CUSTOMERID = 5;
    RETURN HOLD;
END;

-------------------------------------------------------------------------------------------------------------------------------
-- Chinook Exercises - 6.0
-------------------------------------------------------------------------------------------------------------------------------
-- 6.0 TRANSACTIONS
-- A.
CREATE OR REPLACE FUNCTION DELETE_INVOICE(X IN NUMBER)
IS
BEGIN
    DELETE FROM CHINOOK.INVOICE WHERE CHINOOK.INVOICE.INVOICEID = X;
END;
SELECT DELETE_INVOICE(5)
FROM DUAL;
COMMIT;
-- B.
CREATE OR REPLACE PROCEDURE NEW_CUSTOMER(S OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN S FOR
    INSERT INTO CHINOOK.CUSTOMER VALUES(62, 'Daniel', 'Bryan', 'Pro Wrestler', '24 Brango ST', 'Aberdeen', 'WA', 'USA', '98520', '+1(780) 682-4509', '+1 (360) 697-3049', 'bryandanielson@wwe.com', 10);
    COMMIT;
END;


-------------------------------------------------------------------------------------------------------------------------------
-- Chinook Exercises - 7.0
-------------------------------------------------------------------------------------------------------------------------------
-- 7.1 AFTER/FOR
-- A. 
CREATE OR REPLACE TRIGGER AFTER_INSERT
AFTER INSERT ON CHINOOK.EMPLOYEE
FOR EACH ROW
DECLARE
    NEW_ID NUMBER;
    PLACEHOLDER1 NUMBER;
    PLACEHOLDER2 VARCHAR2(50);
BEGIN
        NEW_ID := :NEW.EMPLOYEEID;
        SELECT E.EMPLOYEEID, E.FIRSTNAME INTO PLACEHOLDER1, PLACEHOLDER2 FROM CHINOOK.EMPLOYEE E WHERE E.EMPLOYEEID = NEW_ID;
END;
-- B. AFTER UPDATE TRIGGER ON ROW INSERTED TO ALBUM
CREATE OR REPLACE TRIGGER AFTER_UPDATE
AFTER UPDATE ON CHINOOK.ALBUM
FOR EACH ROW
DECLARE
    NEW_ID NUMBER;
    PLACEHOLDER1 NUMBER;
    PLACEHOLDER2 VARCHAR2(50);
BEGIN
    NEW_ID := :NEW.ALBUMID;
    SELECT A.ALBUMID, A.TITLE INTO PLACEHOLDER1, PLACEHOLDER2 FROM CHINOOK.ALBUM A WHERE A.ALBUMID = NEW_ID;
END;
-- C. AFTER DELETE TRIGGER FOR CUSTOMER DELETED
CREATE OR REPLACE TRIGGER AFTER_UDPATE
AFTER DELETE ON CHINOOK.CUSTOMER
FOR EACH ROW
DECLARE
    OLD_ID NUMBER;
    PLACEHOLDER1 NUMBER;
    PLACEHOLDER2 VARCHAR2(50);
BEGIN
    OLD_ID := :OLD.CUSTOMERID;
    SELECT OLD_ID, 'ID HAS BEEN DELETED' INTO PLACEHOLDER1, PLACEHOLDER2 FROM CHINOOK.CUSTOMER C;
END;