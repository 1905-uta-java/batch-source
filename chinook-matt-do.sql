/*
------------------------------------
----- Sql Assignment 6/5/2019 ------
------------------------------------
*/

/*
-- QUERIES AND DML
*/

SET SERVEROUTPUT ON;

--2.0 SELECT a.
SELECT * 
FROM EMPLOYEE;

--2.0 SELECT b.
SELECT * 
FROM EMPLOYEE
WHERE LASTNAME = 'King';

--2.0 SELECT c.
SELECT * 
FROM EMPLOYEE
WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;

--2.0 SELECT d.
SELECT TITLE
FROM ALBUM
ORDER BY TITLE DESC;

--2.0 SELECT e.
SELECT FIRSTNAME
FROM CUSTOMER
ORDER BY FIRSTNAME ASC;

--2.0 SELECT f.
SELECT *
FROM INVOICE
WHERE BILLINGADDRESS IS NOT NULL;

--2.1 INSERT INTO a.
INSERT INTO GENRE
VALUES (26, 'Apple');

INSERT INTO GENRE
VALUES (27, 'Orange');

--2.1 INSERT INTO b.
INSERT INTO EMPLOYEE
(EMPLOYEEID, LASTNAME, FIRSTNAME)
VALUES (9, 'Apple', 'Pie');

INSERT INTO EMPLOYEE
(EMPLOYEEID, LASTNAME, FIRSTNAME)
VALUES (10, 'Orange', 'Tart');

--2.1 INSERT INTO c.
INSERT INTO CUSTOMER
(CUSTOMERID, LASTNAME, FIRSTNAME, EMAIL)
VALUES (60, 'Tartly', 'Green', 'TartlyGreen@gmail.com');

INSERT INTO CUSTOMER
(CUSTOMERID, LASTNAME, FIRSTNAME, EMAIL)
VALUES (61, 'Tart', 'Lemon', 'Lemonytart11@gmail.com');

--2.2 UPDATE a.
UPDATE CUSTOMER
SET LASTNAME = 'Walter', FIRSTNAME = 'Robert'
WHERE LASTNAME = 'Mitchell' AND FIRSTNAME = 'Aaron';

--2.2 UPDATE b.
UPDATE ARTIST
SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';

/*
-- JOINs
*/

--3.1 INNER JOINs
SELECT INVOICE.INVOICEID, CUSTOMER.LASTNAME, CUSTOMER.FIRSTNAME
FROM INVOICE
INNER JOIN CUSTOMER
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--3.2 OUTER JOINs
SELECT CUSTOMER.CUSTOMERID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID, INVOICE.TOTAL
FROM INVOICE
FULL OUTER JOIN CUSTOMER
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--3.3 RIGHT JOINs
SELECT ARTIST.NAME, ALBUM.TITLE
FROM ALBUM
RIGHT JOIN ARTIST
ON ALBUM.ARTISTID = ARTIST.ARTISTID
ORDER BY ARTIST.NAME ASC;

--3.4 CROSS JOINs
SELECT *
FROM ALBUM
CROSS JOIN ARTIST
ORDER BY ARTIST.ARTISTID ASC;

--3.5 SELF JOINs
SELECT A.*, B.*
FROM EMPLOYEE A, EMPLOYEE B
WHERE A.REPORTSTO = B.REPORTSTO;

--3.6a JOINED QUERIES
SELECT CONCAT(CONCAT(CUSTOMER.FIRSTNAME,' '), CUSTOMER.LASTNAME) AS FULL_NAME, SUM(TOTAL) AS TOTAL
FROM CUSTOMER
JOIN INVOICE
ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID
GROUP BY CONCAT(CONCAT(CUSTOMER.FIRSTNAME,' '), CUSTOMER.LASTNAME);

--3.6b JOINED QUERIES
SELECT EMPLOYEEID, TOTAL
FROM (
    SELECT EMPLOYEE.EMPLOYEEID, SUM(INVOICE.TOTAL) AS TOTAL
    FROM CUSTOMER
    INNER JOIN EMPLOYEE ON EMPLOYEE.EMPLOYEEID = CUSTOMER.SUPPORTREPID
    INNER JOIN INVOICE ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID
    GROUP BY EMPLOYEE.EMPLOYEEID
    )
WHERE ROWNUM <= 1;

--3.6c JOINED QUERIES
SELECT NAME, QUANTITY
FROM(
    SELECT GENRE.NAME, SUM(INVOICELINE.QUANTITY) AS QUANTITY
    FROM TRACK
    INNER JOIN INVOICELINE ON INVOICELINE.TRACKID = TRACK.TRACKID
    INNER JOIN GENRE ON GENRE.GENREID = TRACK.GENREID 
    GROUP BY GENRE.NAME
    ) 
    GROUP BY NAME, QUANTITY
    ORDER BY QUANTITY DESC;
    
--4.1a SYSTEM DEFINED FUNCTIONS
CREATE OR REPLACE FUNCTION GETTIME
RETURN DATE
IS
TIME1 DATE;
BEGIN
SELECT SYSDATE
INTO TIME1
FROM DUAL;
RETURN TIME1;
END;
/

--4.1b SYSTEM DEFINED FUNCTIONS
--FUNCTION TO GET LENGTH OF NAME FROM MEDIATYPE TABLE
CREATE OR REPLACE FUNCTION GETMEDIANAMELENGTH
RETURN NUMBER
IS
LENGTH1 NUMBER;
BEGIN
SELECT COUNT(MEDIATYPE.NAME)
INTO LENGTH1
FROM MEDIATYPE;
RETURN LENGTH1;
END;
/

SELECT GETMEDIANAMELENGTH()
FROM DUAL;

--4.2a SYSTEM DEFINIED AGGREGATE FUNCTIONS
CREATE OR REPLACE FUNCTION GETAVGINVOICE
RETURN VARCHAR2
IS
AVG1 NUMBER;
BEGIN
SELECT AVG(INVOICE.TOTAL)
INTO AVG1
FROM INVOICE;
RETURN 'AVERAGE PRICE OF INVOICES IS: ' + AVG1;
END;
/


--4.2b SYSTEM DEFINED AGGREGATE FUNCTIONS
CREATE OR REPLACE FUNCTION GETEXPENSIVETRACK
RETURN TABLE 
IS TABLE1 TABLE;
BEGIN
SELECT TRACK.NAME, TRACK.UNITPRICE
INTO EXP1
FROM TRACK
WHERE TRACK.UNITPRICE = (SELECT MAX(TRACK.UNITPRICE)
                        FROM TRACK)
ORDER BY TRACK.NAME ASC;
RETURN EXP1;
END;
/


--4.3 USER DEFINIED SCALER FUNCTIONS
CREATE OR REPLACE FUNCTION GETAVGINVOICELINE
RETURN NUMBER
IS
AVG1 NUMBER;
BEGIN
SELECT AVG(INVOICELINE.UNITPRICE)
INTO AVG1
FROM INVOICELINE;
RETURN AVG1;
END;
/

--HOW TO RETURN A TABLE
--4.4 USER DEFINED TABLE VALUED FUNCTIONS
CREATE OR REPLACE TYPE AGE_RECORD AS OBJECT (I NUMBER, NAME VARCHAR2(150));
/

CREATE OR REPLACE TYPE AGE_TABLE AS TABLE OF AGE_RECORD;
/

CREATE OR REPLACE FUNCTION GET_ALL_EMPLOYEE_AFTER(YEAR IN DATE)
RETURN AGE_TABLE
AS
TABLE1 AGE_TABLE;
BEGIN
SELECT EMPLOYEE.EMPLOYEEID, EMPLOYEE.LASTNAME
BULK COLLECT INTO TABLE1
FROM EMPLOYEE
WHERE EMPLOYEE.BIRTHDATE >= YEAR;
RETURN TABLE1;
END;
/

CREATE OR REPLACE FUNCTION GET_ALL_EMPLOYEE_AFTER
RETURN AGE_TABLE
IS
TABLE1 AGE_TABLE;
BEGIN
TABLE1 := AGE_TABLE();

SELECT EMPLOYEE.EMPLOYEEID, EMPLOYEE.LASTNAME
INTO TABLE1
FROM EMPLOYEE
WHERE EMPLOYEE.BIRTHDATE >= '01-JAN-68';
END;
/


--5.1 BASIC STORED PROCEDURE
CREATE OR REPLACE PROCEDURE FIRSTANDLAST(S OUT SYS_REFCURSOR)
IS
BEGIN
OPEN S FOR
    SELECT FIRSTNAME, LASTNAME
    FROM EMPLOYEE;
END;
/

--5.2a STORED PROCEDURE INPUT PARAMETERS
CREATE OR REPLACE PROCEDURE UPDATEEMPL(EMPL IN EMPLOYEE.EMPLOYEEID%TYPE, PH IN EMPLOYEE.PHONE%TYPE)
IS
BEGIN
    UPDATE EMPLOYEE
    SET PHONE = PH
    WHERE EMPLOYEE.EMPLOYEEID = EMPL;
END;
/

--5.2b STORED PROCEDURE INPUT PARAMETERS
CREATE OR REPLACE PROCEDURE GETEMPLMANAGER(EMPL IN EMPLOYEE.EMPLOYEEID%TYPE)
IS
MANAGERS NUMBER;
BEGIN
    SELECT REPORTSTO INTO MANAGERS
    FROM EMPLOYEE
    WHERE EMPLOYEE.EMPLOYEEID = EMPL;
    DBMS_OUTPUT.PUT_LINE(MANAGERS);
END;
/

--HOW TO RETURN A TABLE
--5.3 STORED PROCEDURE OUTPUT PARAMETERS


--6.0a TRANSACTIONS

--6.0b TRANSACTIONS




--7.1a AFTER/FOR
CREATE OR REPLACE TRIGGER AFTER_INSERT
AFTER INSERT ON EMPLOYEE
BEGIN
    DBMS_OUTPUT.PUT_LINE('INSERT COMPLETE');
END;
/

--7.1b AFTER/FOR
CREATE OR REPLACE TRIGGER AFTER_INSERT
AFTER UPDATE ON ALBUM
BEGIN
    DBMS_OUTPUT.PUT_LINE('UPDATE COMPLETE');
END;
/

--7.1c AFTER/FOR
CREATE OR REPLACE TRIGGER AFTER_INSERT
AFTER DELETE ON CUSTOMER
BEGIN
    DBMS_OUTPUT.PUT_LINE('DELETE COMPLETE');
END;

