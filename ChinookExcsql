---------------------------------
--CHINOOK EXERCISES
---------------------------------

--Finding all EMPLOYEE records
SELECT *
FROM CHINOOK.EMPLOYEE;

--Finding records of Employees with the last name King
SELECT *
FROM CHINOOK.EMPLOYEE
WHERE LASTNAME = 'King';

--Finding records of Employees with first name Andrew and Reportsto NULL
SELECT *
FROM CHINOOK.EMPLOYEE
WHERE FIRSTNAME = 'Andrew'
    AND REPORTSTO = NULL;
    
--Sort Album titles in desc order
SELECT *
FROM CHINOOK.ALBUM
ORDER BY TITLE DESC;

--Select First Names from Custmer and sort by asc order in City
SELECT FIRSTNAME
FROM CHINOOK.CUSTOMER
ORDER BY CITY ASC;

--Select Invoices with a certain billing address
SELECT *
FROM CHINOOK.INVOICE
WHERE BILLINGADDRESS like 'T%';

--Inserting two records into the Genre table
INSERT INTO CHINOOK.GENRE (GenreId, Name) VALUES (26, 'Country');
INSERT INTO CHINOOK.GENRE (GenreId, Name) VALUES (27, 'Dubstep');

--Inserting two records into the Employee table
INSERT INTO CHINOOK.EMPLOYEE (LASTNAME, FIRSTNAME, TITLE, EMPLOYEEID) VALUES ('Bear', 'Grinning', 'International Man of Mystery', 9);
INSERT INTO CHINOOK.EMPLOYEE (LASTNAME, FIRSTNAME, TITLE, EMPLOYEEID) VALUES ('Sun', 'Little', 'Alone', 10);

--Inserting two records into Customer table
INSERT INTO CHINOOK.CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL) VALUES (60,'Mikan', 'Midori', 'midori@mikan.com');
INSERT INTO CHINOOK.CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL) VALUES (61, 'Pepsi', 'Drink', 'pepsi@isntcola.com');

--Update a customer to have a different name
UPDATE CHINOOK.CUSTOMER SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE FIRSTNAME = 'Aaron'
AND LASTNAME = 'Mitchell';

--Update an artist name to its shortened version
UPDATE CHINOOK.ARTIST SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';

--Have an inner join customer name and their invoiceid
SELECT FIRSTNAME, LASTNAME, INVOICEID
FROM CHINOOK.CUSTOMER C
JOIN CHINOOK.INVOICE I
ON C.CUSTOMERID = I.CUSTOMERID;

--Have an outer join specifying firstname, lastname, invoiceid, and total
SELECT FIRSTNAME, LASTNAME, INVOICEID, TOTAL
FROM CHINOOK.CUSTOMER C
FULL JOIN CHINOOK.INVOICE I
ON C.CUSTOMERID = I.CUSTOMERID;

--Have a right join specify Album and Artist specifying artist name and album title
SELECT TITLE, NAME
FROM CHINOOK.ALBUM A
RIGHT JOIN CHINOOK.ARTIST N
ON A.ARTISTID = N.ARTISTID;

--Have a cross join between albums and artists which sorts by artist name in ascending order
SELECT NAME
FROM CHINOOK.ARTIST N
CROSS JOIN CHINOOK.ALBUM A
ORDER BY N.NAME ASC;

--Self join on the employee table joining on the reportsto column
SELECT *
FROM CHINOOK.EMPLOYEE E1, CHINOOK.EMPLOYEE E2
WHERE E1.EMPLOYEEID = E2.REPORTSTO;

--Joined queries
---Customer first + last as FULL_NAME and total money spent as TOTAL
SELECT CONCAT(CONCAT(C.FIRSTNAME, ' '), C.LASTNAME) AS FULL_NAME, SUM(TOTAL) AS TOTAL
FROM CHINOOK.CUSTOMER C
JOIN CHINOOK.INVOICE I
ON I.CUSTOMERID = C.CUSTOMERID
GROUP BY I.CUSTOMERID, CONCAT(CONCAT(C.FIRSTNAME, ' '), C.LASTNAME);

---Show employee who's made the highest total value of sales
SELECT EMPLOYEEID, TOTAL
FROM(
SELECT E.EMPLOYEEID, SUM(I.TOTAL) AS TOTAL
FROM CHINOOK.CUSTOMER C
INNER JOIN CHINOOK.INVOICE I ON C.CUSTOMERID = I.CUSTOMERID
INNER JOIN CHINOOK.EMPLOYEE E ON E.EMPLOYEEID = C.SUPPORTREPID
GROUP BY E.EMPLOYEEID
ORDER BY TOTAL DESC
) A
WHERE ROWNUM = 1;

---Number of purchases per genre displaying genre name and number of purchases sorted in descending order

SELECT G.NAME GENRE, COUNT(IL.INVOICEID) PURCHASES
FROM CHINOOK.GENRE G
FULL OUTER JOIN CHINOOK.TRACK T
ON G.GENREID = T.GENREID
FULL OUTER JOIN CHINOOK.INVOICELINE IL
ON IL.TRACKID = T.TRACKID
GROUP BY G.NAME
ORDER BY PURCHASES DESC;

SET SERVEROUTPUT ON;

--SELECT TO_CHAR(SYSDATE, 'DD-MON-YYYY HH:MI:SS')FROM dual;
--SELECT SYSTIMESTAMP FROM dual;

---Function that returns current time

CREATE OR REPLACE FUNCTION GETDATE
RETURN TIMESTAMP WITH TIME ZONE
IS
BEGIN
     RETURN SYSTIMESTAMP;
END;

BEGIN
    DBMS_OUTPUT.PUT_LINE(GETDATE());
END;

--Function to give MEDIATYPE length
CREATE OR REPLACE FUNCTION MEDIATYPELEN(NAME IN STRING)
RETURN NUMBER
IS
BEGIN
    RETURN LENGTH(NAME);
END;

SELECT MEDIATYPELEN(NAME) AS LENGTH
FROM CHINOOK.MEDIATYPE;

---Average total of all invoices, a user defined aggregate function
CREATE OR REPLACE FUNCTION AVERAGEINV
RETURN NUMBER
IS
AVERAGE NUMBER;
BEGIN
    SELECT AVG(TOTAL) INTO AVERAGE
    FROM CHINOOK.INVOICE I;
    RETURN AVERAGE;
END;

BEGIN
    DBMS_OUTPUT.PUT_LINE(AVERAGEINV());
END;

--Function that returns the most expensive track
CREATE OR REPLACE FUNCTION EXPENSIVE
RETURN VARCHAR2
IS
TRACKNAME VARCHAR2(200);
EXPENSE NUMBER;
BEGIN
    
    SELECT MAX(T.UNITPRICE)
    INTO EXPENSE
    FROM CHINOOK.TRACK T;
    SELECT T.NAME
    INTO TRACKNAME
    FROM CHINOOK.TRACK T
    WHERE T.UNITPRICE = EXPENSE AND ROWNUM =1;
    RETURN TRACKNAME;

END;

BEGIN
    DBMS_OUTPUT.PUT_LINE(EXPENSIVE());
END;

--Function that returns the average of invoiceline total
CREATE OR REPLACE FUNCTION AVERAGEIL
RETURN NUMBER
IS
AVERAGE NUMBER;
BEGIN
    SELECT AVG(UNITPRICE) INTO AVERAGE
    FROM CHINOOK.INVOICELINE;
    RETURN AVERAGE;
END;

BEGIN
    DBMS_OUTPUT.PUT_LINE(AVERAGEIL());
END;
--Function to return a cursor with all employees born after 1968 
CREATE OR REPLACE FUNCTION EMP
RETURN SYS_REFCURSOR AS BA SYS_REFCURSOR;
/*    CURSOR BA IS
    SELECT *
    FROM CHINOOK.EMPLOYEE E
    WHERE E.BIRTHDATE >= DATE '1968-01-01';
    CURSOR RES;*/
BEGIN
    OPEN BA
    FOR SELECT * FROM CHINOOK.EMPLOYEE E
    WHERE E.BIRTHDATE >= DATE '1968-01-01';
    RETURN BA;
END;

--Stored procedure that selects the fist and last names of all employees
CREATE OR REPLACE PROCEDURE FIRSTANDLAST(RC OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN RC FOR
    SELECT FIRSTNAME, LASTNAME
    FROM CHINOOK.EMPLOYEE;
END;


DECLARE
    RC SYS_REFCURSOR;
    TEMP_FN CHINOOK.EMPLOYEE.FIRSTNAME%TYPE;
    TEMP_LN CHINOOK.EMPLOYEE.LASTNAME%TYPE;
BEGIN 
    FIRSTANDLAST(RC);
    LOOP
        FETCH RC INTO TEMP_FN, TEMP_LN;
        EXIT WHEN RC%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(CONCAT(TEMP_FN, TEMP_LN));
    END LOOP;
    CLOSE RC;
END;

--Stored procedure to update personal information for an employee
CREATE OR REPLACE PROCEDURE UPDATEPI(ID IN CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE, LN IN CHINOOK.EMPLOYEE.LASTNAME%TYPE, FN IN CHINOOK.EMPLOYEE.FIRSTNAME%TYPE, TITL IN CHINOOK.EMPLOYEE.TITLE%TYPE,
    RT IN CHINOOK.EMPLOYEE.REPORTSTO%TYPE, BDAY IN CHINOOK.EMPLOYEE.BIRTHDATE%TYPE, HDAY IN CHINOOK.EMPLOYEE.HIREDATE%TYPE, ADD IN CHINOOK.EMPLOYEE.ADDRESS%TYPE, CIT IN CHINOOK.EMPLOYEE.CITY%TYPE,
    ST IN CHINOOK.EMPLOYEE.STATE%TYPE, CTY IN CHINOOK.EMPLOYEE.COUNTRY%TYPE, PC IN CHINOOK.EMPLOYEE.POSTALCODE%TYPE, PN IN CHINOOK.EMPLOYEE.PHONE%TYPE, FX IN CHINOOK.EMPLOYEE.FAX%TYPE, EMAIL IN CHINOOK.EMPLOYEE.EMAIL%TYPE)
AS
BEGIN
    UPDATE CHINOOK.EMPLOYEE
    SET LASTNAME = LN, FIRSTNAME = FN, TITLE = TITL, REPORTSTO = RT, BIRTHDATE = BDAY, HIREDATE = HDAY, ADDRESS = ADD, CITY = CIT, STATE = ST, COUNTRY = CTY, POSTALCODE =  PC, PHONE = PN, FAX = FX, EMAIL = EMAIL
    WHERE EMPLOYEEID = ID;
END;

--Stored Procedure to return the managers of an employee
CREATE OR REPLACE PROCEDURE GETMANAGERS(EMPID IN CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE, RC OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN RC FOR
    SELECT *
    FROM CHINOOK.EMPLOYEE E
    WHERE E.REPORTSTO = EMPID;
END;

--Stored Procedure to get the name and company of a customer
CREATE OR REPLACE PROCEDURE GETNANDC(CID IN CHINOOK.CUSTOMER.CUSTOMERID%TYPE, RC OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN RC FOR
    SELECT FIRSTNAME, LASTNAME, COMPANY
    FROM CHINOOK.CUSTOMER C
    WHERE C.CUSTOMERID = CID;
END;

--Transaction to delete an invoice given an invoice id
DECLARE
    --GIVE INVOICE ID HERE
    IID CHINOOK.INVOICE.INVOICEID%TYPE:= 420;
BEGIN
    DELETE FROM CHINOOK.INVOICE WHERE CHINOOK.INVOICE.INVOICEID = IID;
    COMMIT;
END;

--Transaction within a stored procedure to inserts a new record into the customer table
CREATE OR REPLACE PROCEDURE NEWCUST(CID IN CHINOOK.CUSTOMER.CUSTOMERID%TYPE, FN IN CHINOOK.CUSTOMER.FIRSTNAME%TYPE, LN IN CHINOOK.CUSTOMER.LASTNAME%TYPE, COMP IN CHINOOK.CUSTOMER.COMPANY%TYPE, ADD IN CHINOOK.CUSTOMER.ADDRESS%TYPE,
    CTY IN CHINOOK.CUSTOMER.CITY%TYPE, ST IN CHINOOK.CUSTOMER.STATE%TYPE, COT IN CHINOOK.CUSTOMER.COUNTRY%TYPE, PC IN CHINOOK.CUSTOMER.POSTALCODE%TYPE, PH IN  CHINOOK.CUSTOMER.PHONE%TYPE, FX IN CHINOOK.CUSTOMER.FAX%TYPE,
    EMA IN CHINOOK.CUSTOMER.EMAIL%TYPE, SI IN CHINOOK.CUSTOMER.SUPPORTREPID%TYPE)
AS
BEGIN
    INSERT INTO CHINOOK.CUSTOMER(CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL, SUPPORTREPID) VALUES(CID, FN, LN, COMP, ADD, CTY, ST, COT, PC, PH, FX, EMA, SI);
    COMMIT;
END;

SET SERVEROUTPUT ON;

--TRIGGER ON INSERT INTO THE CUSTOMER TABLE
CREATE OR REPLACE TRIGGER TRIGONINS
AFTER INSERT ON CHINOOK.CUSTOMER
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('INSERT SUCCESS!!!!!!!!');
END;

INSERT INTO CHINOOK.CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL) VALUES (62,'Mikan', 'MiI', 'midori@mi.com');
INSERT INTO CHINOOK.CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL) VALUES (63, 'Cola', 'Drink', 'Cola@isntpepsi.com');

--Trigger on update to the album table
CREATE OR REPLACE TRIGGER TRIGONUP
AFTER UPDATE ON CHINOOK.ALBUM
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Yo dont touch my albums');
END;

--Trigger on delete in customer table 
CREATE OR REPLACE TRIGGER TRIGONDEL
AFTER DELETE ON CHINOOK.CUSTOMER
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('*Mini Thanos snap*');
END;